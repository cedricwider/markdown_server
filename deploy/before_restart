#!/usr/bin/env ruby
require 'English'

oldrev, newrev = ARGV

def run(cmd)
  exit($CHILD_STATUS) unless system "umask 002 && #{cmd}"
end

RAILS_ENV   = ENV['RAILS_ENV'] || 'production'
use_bundler = File.file? 'Gemfile'
use_config  = File.file? 'config.ru'
rake_cmd    = use_bundler ? 'bundle exec rake' : 'rake'

if use_bundler
  bundler_args = ['--deployment']
  BUNDLE_WITHOUT = ENV['BUNDLE_WITHOUT'] || 'development:test'
  bundler_args << '--without' << BUNDLE_WITHOUT unless BUNDLE_WITHOUT.empty?

  # update gem bundle
  run "bundle install #{bundler_args.join(' ')}"
end

if use_config
  rake_args = []

  run "rakeup #{rake_args.join(' ')}"
end

def git_diff_migrate(newrev, oldrev)
  `git diff #{oldrev} #{newrev} --diff-filter=A --name-only -z db/migrate`
end

def git_diff_assets(newrev, oldrev)
  `git diff #{oldrev} #{newrev} --name-only -z app/assets`
end

if File.file? 'Rakefile'
  tasks = []

  num_migrations = git_diff_migrate(newrev, oldrev).split("\0").size
  # run migrations if new ones have been added
  tasks << 'db:migrate' if num_migrations > 0

  # precompile assets
  changed_assets = git_diff_assets(newrev, oldrev).split("\0")
  tasks << 'assets:precompile' unless changed_assets.empty?

  run "#{rake_cmd} #{tasks.join(' ')} RAILS_ENV=#{RAILS_ENV}" if tasks.any?
end

# clear cached assets (unversioned/ignored files)
run 'git clean -x -f -- public/stylesheets public/javascripts'

# clean unversioned files from vendor/plugins (e.g. old submodules)
run 'git clean -d -f -- vendor/plugins'
